├── data <- _ |...| _ :=
│   └── gzip <- gzip.main :=
│       ├── 0 :=
│       │   ├── header <- gzip.header :=
│       │   │   ├── magic <- (...)
│       │   │   ├── method <- base.u8 := 8
│       │   │   ├── file-flags <- assert (flags -> flags.__reserved == 0) (map (packedbits -> { ... }) U8) :=
│       │   │   │   ├── fcomment := 0
│       │   │   │   ├── fname := 1
│       │   │   │   ├── fextra := 0
│       │   │   │   ├── fhcrc := 0
│       │   │   │   └── ftext := 0
│       │   │   ├── timestamp <- base.u32le := 1683505215
│       │   │   ├── compression-flags <- base.u8 := 0
│       │   │   └── os-id <- base.u8 := 3
│       │   ├── fextra <- maybe (header.file-flags.fextra != 0) gzip.fextra := none
│       │   ├── fname <- maybe (header.file-flags.fname != 0) gzip.fname :=
some "test1"
│       │   ├── fcomment <- maybe (header.file-flags.fcomment != 0) gzip.fcomment := none
│       │   ├── fhcrc <- maybe (header.file-flags.fhcrc != 0) gzip.fhcrc := none
│       │   ├── data <- bits deflate.main :=
│       │   │   ├── blocks <- repeat-until-last (x -> x.final == 1) deflate.block :=
│       │   │   │   └── 0 <- deflate.block :=
│       │   │   │       ├── final <- base.bit := 1
│       │   │   │       ├── type <- map (bits -> bits.1 << 1 | bits.0) (...) := 1
│       │   │   │       └── data <- match type { ... } :=
│       │   │   │           └── fixed_huffman <- deflate.fixed_huffman :=
│       │   │   │               ├── codes <- dynamic format huffman (repeat-until-last (x -> as-u16 (x.code) == 256) { ... }) :=
│       │   │   │               │   ├── 0 :=
│       │   │   │               │   │   ├── code <- apply := 72
│       │   │   │               │   │   └── extra <- match code { ... } := none
│       │   │   │               │   ├── 1 :=
│       │   │   │               │   │   ├── code <- apply := 101
│       │   │   │               │   │   └── extra <- match code { ... } := none
│       │   │   │               │   ├── 2 :=
│       │   │   │               │   │   ├── code <- apply := 108
│       │   │   │               │   │   └── extra <- match code { ... } := none
│       │   │   │               │   ├── 3 :=
│       │   │   │               │   │   ├── code <- apply := 108
│       │   │   │               │   │   └── extra <- match code { ... } := none
│       │   │   │               │   ├── 4 :=
│       │   │   │               │   │   ├── code <- apply := 111
│       │   │   │               │   │   └── extra <- match code { ... } := none
│       │   │   │               │   ├── 5 :=
│       │   │   │               │   │   ├── code <- apply := 44
│       │   │   │               │   │   └── extra <- match code { ... } := none
│       │   │   │               │   ├── 6 :=
│       │   │   │               │   │   ├── code <- apply := 32
│       │   │   │               │   │   └── extra <- match code { ... } := none
│       │   │   │               │   ├── 7 :=
│       │   │   │               │   │   ├── code <- apply := 119
│       │   │   │               │   │   └── extra <- match code { ... } := none
│       │   │   │               │   ├── 8 :=
│       │   │   │               │   │   ├── code <- apply := 111
│       │   │   │               │   │   └── extra <- match code { ... } := none
│       │   │   │               │   ├── 9 :=
│       │   │   │               │   │   ├── code <- apply := 114
│       │   │   │               │   │   └── extra <- match code { ... } := none
│       │   │   │               │   ~
│       │   │   │               │   └── 14 :=
│       │   │   │               │       ├── code <- apply := 256
│       │   │   │               │       └── extra <- match code { ... } := none
│       │   │   │               └── codes-values <- compute flat-map (x -> match x.code { ... }) codes :=
│       │   │   │                   ├── 0 := { literal := 72 }
│       │   │   │                   ├── 1 := { literal := 101 }
│       │   │   │                   ├── 2 := { literal := 108 }
│       │   │   │                   ├── 3 := { literal := 108 }
│       │   │   │                   ├── 4 := { literal := 111 }
│       │   │   │                   ├── 5 := { literal := 44 }
│       │   │   │                   ├── 6 := { literal := 32 }
│       │   │   │                   ├── 7 := { literal := 119 }
│       │   │   │                   ├── 8 := { literal := 111 }
│       │   │   │                   ├── 9 := { literal := 114 }
│       │   │   │                   ~
│       │   │   │                   └── 13 := { literal := 10 }
│       │   │   ├── codes <- compute flat-map (x -> match x.data { ... }) blocks :=
│       │   │   │   ├── 0 := { literal := 72 }
│       │   │   │   ├── 1 := { literal := 101 }
│       │   │   │   ├── 2 := { literal := 108 }
│       │   │   │   ├── 3 := { literal := 108 }
│       │   │   │   ├── 4 := { literal := 111 }
│       │   │   │   ├── 5 := { literal := 44 }
│       │   │   │   ├── 6 := { literal := 32 }
│       │   │   │   ├── 7 := { literal := 119 }
│       │   │   │   ├── 8 := { literal := 111 }
│       │   │   │   ├── 9 := { literal := 114 }
│       │   │   │   ~
│       │   │   │   └── 13 := { literal := 10 }
│       │   │   └── inflate <- compute flat-map-list (tuple_var -> match tuple_var { ... }) codes :=
│       │   │       ├── 0 := 72
│       │   │       ├── 1 := 101
│       │   │       ├── 2 := 108
│       │   │       ├── 3 := 108
│       │   │       ├── 4 := 111
│       │   │       ├── 5 := 44
│       │   │       ├── 6 := 32
│       │   │       ├── 7 := 119
│       │   │       ├── 8 := 111
│       │   │       ├── 9 := 114
│       │   │       ~
│       │   │       └── 13 := 10
│       │   └── footer <- gzip.footer :=
│       │       ├── crc <- base.u32le := 2069210904
│       │       └── length <- base.u32le := 14
│       └── 1 :=
│           ├── header <- gzip.header :=
│           │   ├── magic <- (...)
│           │   ├── method <- base.u8 := 8
│           │   ├── file-flags <- assert (flags -> flags.__reserved == 0) (map (packedbits -> { ... }) U8) :=
│           │   │   ├── fcomment := 0
│           │   │   ├── fname := 1
│           │   │   ├── fextra := 0
│           │   │   ├── fhcrc := 0
│           │   │   └── ftext := 0
│           │   ├── timestamp <- base.u32le := 1683505384
│           │   ├── compression-flags <- base.u8 := 0
│           │   └── os-id <- base.u8 := 3
│           ├── fextra <- maybe (header.file-flags.fextra != 0) gzip.fextra := none
│           ├── fname <- maybe (header.file-flags.fname != 0) gzip.fname :=
some "test2"
│           ├── fcomment <- maybe (header.file-flags.fcomment != 0) gzip.fcomment := none
│           ├── fhcrc <- maybe (header.file-flags.fhcrc != 0) gzip.fhcrc := none
│           ├── data <- bits deflate.main :=
│           │   ├── blocks <- repeat-until-last (x -> x.final == 1) deflate.block :=
│           │   │   └── 0 <- deflate.block :=
│           │   │       ├── final <- base.bit := 1
│           │   │       ├── type <- map (bits -> bits.1 << 1 | bits.0) (...) := 1
│           │   │       └── data <- match type { ... } :=
│           │   │           └── fixed_huffman <- deflate.fixed_huffman :=
│           │   │               ├── codes <- dynamic format huffman (repeat-until-last (x -> as-u16 (x.code) == 256) { ... }) :=
│           │   │               │   ├── 0 :=
│           │   │               │   │   ├── code <- apply := 104
│           │   │               │   │   └── extra <- match code { ... } := none
│           │   │               │   ├── 1 :=
│           │   │               │   │   ├── code <- apply := 101
│           │   │               │   │   └── extra <- match code { ... } := none
│           │   │               │   ├── 2 :=
│           │   │               │   │   ├── code <- apply := 108
│           │   │               │   │   └── extra <- match code { ... } := none
│           │   │               │   ├── 3 :=
│           │   │               │   │   ├── code <- apply := 108
│           │   │               │   │   └── extra <- match code { ... } := none
│           │   │               │   ├── 4 :=
│           │   │               │   │   ├── code <- apply := 111
│           │   │               │   │   └── extra <- match code { ... } := none
│           │   │               │   ├── 5 :=
│           │   │               │   │   ├── code <- apply := 32
│           │   │               │   │   └── extra <- match code { ... } := none
│           │   │               │   ├── 6 :=
│           │   │               │   │   ├── code <- apply := 104
│           │   │               │   │   └── extra <- match code { ... } := none
│           │   │               │   ├── 7 :=
│           │   │               │   │   ├── code <- apply := 258
│           │   │               │   │   └── extra <- match code { ... } :=
│           │   │               │   │       └── some :=
│           │   │               │   │           ├── length-extra-bits := 0
│           │   │               │   │           ├── length := 4
│           │   │               │   │           ├── distance-code := 4
│           │   │               │   │           └── distance-record :=
│           │   │               │   │               ├── distance-extra-bits := 1
│           │   │               │   │               └── distance := 6
│           │   │               │   ├── 8 :=
│           │   │               │   │   ├── code <- apply := 10
│           │   │               │   │   └── extra <- match code { ... } := none
│           │   │               │   └── 9 :=
│           │   │               │       ├── code <- apply := 256
│           │   │               │       └── extra <- match code { ... } := none
│           │   │               └── codes-values <- compute flat-map (x -> match x.code { ... }) codes :=
│           │   │                   ├── 0 := { literal := 104 }
│           │   │                   ├── 1 := { literal := 101 }
│           │   │                   ├── 2 := { literal := 108 }
│           │   │                   ├── 3 := { literal := 108 }
│           │   │                   ├── 4 := { literal := 111 }
│           │   │                   ├── 5 := { literal := 32 }
│           │   │                   ├── 6 := { literal := 104 }
│           │   │                   ├── 7 :=
│           │   │                   │   └── reference :=
│           │   │                   │       ├── length := 4
│           │   │                   │       └── distance := 6
│           │   │                   └── 8 := { literal := 10 }
│           │   ├── codes <- compute flat-map (x -> match x.data { ... }) blocks :=
│           │   │   ├── 0 := { literal := 104 }
│           │   │   ├── 1 := { literal := 101 }
│           │   │   ├── 2 := { literal := 108 }
│           │   │   ├── 3 := { literal := 108 }
│           │   │   ├── 4 := { literal := 111 }
│           │   │   ├── 5 := { literal := 32 }
│           │   │   ├── 6 := { literal := 104 }
│           │   │   ├── 7 :=
│           │   │   │   └── reference :=
│           │   │   │       ├── length := 4
│           │   │   │       └── distance := 6
│           │   │   └── 8 := { literal := 10 }
│           │   └── inflate <- compute flat-map-list (tuple_var -> match tuple_var { ... }) codes :=
│           │       ├── 0 := 104
│           │       ├── 1 := 101
│           │       ├── 2 := 108
│           │       ├── 3 := 108
│           │       ├── 4 := 111
│           │       ├── 5 := 32
│           │       ├── 6 := 104
│           │       ├── 7 := 101
│           │       ├── 8 := 108
│           │       ├── 9 := 108
│           │       ~
│           │       └── 11 := 10
│           └── footer <- gzip.footer :=
│               ├── crc <- base.u32le := 1141533349
│               └── length <- base.u32le := 12
└── end <- end-of-input
