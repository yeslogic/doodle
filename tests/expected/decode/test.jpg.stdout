└── data <- _ |...| _ :=
    └── jpeg <- jpeg.main :=
        ├── soi <- jpeg.soi
        ├── frame <- jpeg.frame :=
        │   ├── initial-segment <- _ |...| _ :=
        │   │   └── app0 <- jpeg.app0 :=
        │   │       ├── marker <- { ... }
        │   │       ├── length <- ReadU16Be := 16
        │   │       └── data <- slice (length - 2) jpeg.app0-data :=
        │   │           ├── identifier <- base.asciiz-string := "JFIF"
        │   │           └── data <- match identifier.string { ... } :=
        │   │               └── jfif <- jpeg.app0-jfif :=
        │   │                   ├── version-major <- ReadU8 := 1
        │   │                   ├── version-minor <- ReadU8 := 1
        │   │                   ├── density-units <- assert (x -> x <= 2) ReadU8 := 1
        │   │                   ├── density-x <- assert (x -> x != 0) ReadU16Be := 50
        │   │                   ├── density-y <- assert (x -> x != 0) ReadU16Be := 50
        │   │                   ├── thumbnail-width <- ReadU8 := 0
        │   │                   ├── thumbnail-height <- ReadU8 := 0
        │   │                   └── thumbnail-pixels <- repeat-count thumbnail-height (repeat-count thumbnail-width jpeg.thumbnail-pixel) := []
        │   ├── segments <- repeat jpeg.table-or-misc :=
        │   │   ├── 0 <- jpeg.table-or-misc :=
        │   │   │   └── dqt <- jpeg.dqt :=
        │   │   │       ├── marker <- { ... }
        │   │   │       ├── length <- ReadU16Be := 67
        │   │   │       └── data <- slice (length - 2) (repeat1 jpeg.dqt-data) :=
        │   │   │           └── 0 <- jpeg.dqt-data :=
        │   │   │               ├── precision-table-id <- assert (precision-table-id -> (precision-table-id.precision <= 1) && (precision-table-id.table-id <= 3)) (map (packed_bits -> { ... }) U8) :=
        │   │   │               │   ├── precision := 0
        │   │   │               │   └── table-id := 0
        │   │   │               └── elements <- match precision-table-id.precision { ... } :=
        │   │   │                   └── Bytes <- repeat-count 64 ReadU8 :=
        │   │   │                       ├── 0 := 8
        │   │   │                       ├── 1 := 6
        │   │   │                       ├── 2 := 6
        │   │   │                       ├── 3 := 7
        │   │   │                       ├── 4 := 6
        │   │   │                       ├── 5 := 5
        │   │   │                       ├── 6 := 8
        │   │   │                       ├── 7 := 7
        │   │   │                       ├── 8 := 7
        │   │   │                       ├── 9 := 7
        │   │   │                       ~
        │   │   │                       └── 63 := 50
        │   │   └── 1 <- jpeg.table-or-misc :=
        │   │       └── dqt <- jpeg.dqt :=
        │   │           ├── marker <- { ... }
        │   │           ├── length <- ReadU16Be := 67
        │   │           └── data <- slice (length - 2) (repeat1 jpeg.dqt-data) :=
        │   │               └── 0 <- jpeg.dqt-data :=
        │   │                   ├── precision-table-id <- assert (precision-table-id -> (precision-table-id.precision <= 1) && (precision-table-id.table-id <= 3)) (map (packed_bits -> { ... }) U8) :=
        │   │                   │   ├── precision := 0
        │   │                   │   └── table-id := 1
        │   │                   └── elements <- match precision-table-id.precision { ... } :=
        │   │                       └── Bytes <- repeat-count 64 ReadU8 :=
        │   │                           ├── 0 := 9
        │   │                           ├── 1 := 9
        │   │                           ├── 2 := 9
        │   │                           ├── 3 := 12
        │   │                           ├── 4 := 11
        │   │                           ├── 5 := 12
        │   │                           ├── 6 := 24
        │   │                           ├── 7 := 13
        │   │                           ├── 8 := 13
        │   │                           ├── 9 := 24
        │   │                           ~
        │   │                           └── 63 := 50
        │   ├── header <- jpeg.frame-header :=
        │   │   └── sof0 <- jpeg.sof0 :=
        │   │       ├── marker <- { ... }
        │   │       ├── length <- ReadU16Be := 17
        │   │       └── data <- slice (length - 2) jpeg.sof-data :=
        │   │           ├── sample-precision <- assert (x -> match x { ... }) ReadU8 := 8
        │   │           ├── num-lines <- ReadU16Be := 97
        │   │           ├── num-samples-per-line <- assert (x -> x != 0) ReadU16Be := 105
        │   │           ├── num-image-components <- assert (x -> x != 0) ReadU8 := 3
        │   │           └── image-components <- repeat-count num-image-components jpeg.sof-image-component :=
        │   │               ├── 0 <- jpeg.sof-image-component :=
        │   │               │   ├── id <- ReadU8 := 1
        │   │               │   ├── sampling-factor <- map (packed_bits -> { ... }) U8 :=
        │   │               │   │   ├── horizontal := 2
        │   │               │   │   └── vertical := 2
        │   │               │   └── quantization-table-id <- assert (x -> x <= 3) ReadU8 := 0
        │   │               ├── 1 <- jpeg.sof-image-component :=
        │   │               │   ├── id <- ReadU8 := 2
        │   │               │   ├── sampling-factor <- map (packed_bits -> { ... }) U8 :=
        │   │               │   │   ├── horizontal := 1
        │   │               │   │   └── vertical := 1
        │   │               │   └── quantization-table-id <- assert (x -> x <= 3) ReadU8 := 1
        │   │               └── 2 <- jpeg.sof-image-component :=
        │   │                   ├── id <- ReadU8 := 3
        │   │                   ├── sampling-factor <- map (packed_bits -> { ... }) U8 :=
        │   │                   │   ├── horizontal := 1
        │   │                   │   └── vertical := 1
        │   │                   └── quantization-table-id <- assert (x -> x <= 3) ReadU8 := 1
        │   ├── scan <- jpeg.scan :=
        │   │   ├── segments <- repeat jpeg.table-or-misc :=
        │   │   │   ├── 0 <- jpeg.table-or-misc :=
        │   │   │   │   └── dht <- jpeg.dht :=
        │   │   │   │       ├── marker <- { ... }
        │   │   │   │       ├── length <- ReadU16Be := 27
        │   │   │   │       └── data <- slice (length - 2) jpeg.dht-data :=
        │   │   │   │           ├── class-table-id <- assert (class-table-id -> (class-table-id.class < 2) && (class-table-id.table-id < 4)) (map (packed_bits -> { ... }) U8) :=
        │   │   │   │           │   ├── class := 0
        │   │   │   │           │   └── table-id := 0
        │   │   │   │           ├── num-codes <- repeat-count 16 ReadU8 :=
        │   │   │   │           │   ├── 0 := 0
        │   │   │   │           │   ├── 1 := 2
        │   │   │   │           │   ├── 2 := 2
        │   │   │   │           │   ├── 3 := 3
        │   │   │   │           │   ├── 4 := 1
        │   │   │   │           │   ├── 5 := 0
        │   │   │   │           │   ├── 6 := 0
        │   │   │   │           │   ├── 7 := 0
        │   │   │   │           │   ├── 8 := 0
        │   │   │   │           │   ├── 9 := 0
        │   │   │   │           │   ~
        │   │   │   │           │   └── 15 := 0
        │   │   │   │           └── values <- for-each num-codes n (repeat-count n ReadU8) :=
        │   │   │   │               ├── 0 := []
        │   │   │   │               ├── 1 :=
        │   │   │   │               │   ├── 0 := 0
        │   │   │   │               │   └── 1 := 6
        │   │   │   │               ├── 2 :=
        │   │   │   │               │   ├── 0 := 5
        │   │   │   │               │   └── 1 := 7
        │   │   │   │               ├── 3 :=
        │   │   │   │               │   ├── 0 := 2
        │   │   │   │               │   ├── 1 := 3
        │   │   │   │               │   └── 2 := 4
        │   │   │   │               ├── 4 :=
        │   │   │   │               │   └── 0 := 1
        │   │   │   │               ├── 5 := []
        │   │   │   │               ├── 6 := []
        │   │   │   │               ├── 7 := []
        │   │   │   │               ├── 8 := []
        │   │   │   │               ├── 9 := []
        │   │   │   │               ~
        │   │   │   │               └── 15 := []
        │   │   │   ├── 1 <- jpeg.table-or-misc :=
        │   │   │   │   └── dht <- jpeg.dht :=
        │   │   │   │       ├── marker <- { ... }
        │   │   │   │       ├── length <- ReadU16Be := 58
        │   │   │   │       └── data <- slice (length - 2) jpeg.dht-data :=
        │   │   │   │           ├── class-table-id <- assert (class-table-id -> (class-table-id.class < 2) && (class-table-id.table-id < 4)) (map (packed_bits -> { ... }) U8) :=
        │   │   │   │           │   ├── class := 1
        │   │   │   │           │   └── table-id := 0
        │   │   │   │           ├── num-codes <- repeat-count 16 ReadU8 :=
        │   │   │   │           │   ├── 0 := 0
        │   │   │   │           │   ├── 1 := 2
        │   │   │   │           │   ├── 2 := 1
        │   │   │   │           │   ├── 3 := 3
        │   │   │   │           │   ├── 4 := 3
        │   │   │   │           │   ├── 5 := 3
        │   │   │   │           │   ├── 6 := 2
        │   │   │   │           │   ├── 7 := 3
        │   │   │   │           │   ├── 8 := 6
        │   │   │   │           │   ├── 9 := 2
        │   │   │   │           │   ~
        │   │   │   │           │   └── 15 := 0
        │   │   │   │           └── values <- for-each num-codes n (repeat-count n ReadU8) :=
        │   │   │   │               ├── 0 := []
        │   │   │   │               ├── 1 :=
        │   │   │   │               │   ├── 0 := 1
        │   │   │   │               │   └── 1 := 2
        │   │   │   │               ├── 2 :=
        │   │   │   │               │   └── 0 := 3
        │   │   │   │               ├── 3 :=
        │   │   │   │               │   ├── 0 := 4
        │   │   │   │               │   ├── 1 := 5
        │   │   │   │               │   └── 2 := 17
        │   │   │   │               ├── 4 :=
        │   │   │   │               │   ├── 0 := 0
        │   │   │   │               │   ├── 1 := 18
        │   │   │   │               │   └── 2 := 33
        │   │   │   │               ├── 5 :=
        │   │   │   │               │   ├── 0 := 6
        │   │   │   │               │   ├── 1 := 19
        │   │   │   │               │   └── 2 := 49
        │   │   │   │               ├── 6 :=
        │   │   │   │               │   ├── 0 := 34
        │   │   │   │               │   └── 1 := 65
        │   │   │   │               ├── 7 :=
        │   │   │   │               │   ├── 0 := 7
        │   │   │   │               │   ├── 1 := 81
        │   │   │   │               │   └── 2 := 97
        │   │   │   │               ├── 8 :=
        │   │   │   │               │   ├── 0 := 20
        │   │   │   │               │   ├── 1 := 21
        │   │   │   │               │   ├── 2 := 35
        │   │   │   │               │   ├── 3 := 50
        │   │   │   │               │   ├── 4 := 113
        │   │   │   │               │   └── 5 := 129
        │   │   │   │               ├── 9 :=
        │   │   │   │               │   ├── 0 := 66
        │   │   │   │               │   └── 1 := 67
        │   │   │   │               ~
        │   │   │   │               └── 15 := []
        │   │   │   ├── 2 <- jpeg.table-or-misc :=
        │   │   │   │   └── dht <- jpeg.dht :=
        │   │   │   │       ├── marker <- { ... }
        │   │   │   │       ├── length <- ReadU16Be := 26
        │   │   │   │       └── data <- slice (length - 2) jpeg.dht-data :=
        │   │   │   │           ├── class-table-id <- assert (class-table-id -> (class-table-id.class < 2) && (class-table-id.table-id < 4)) (map (packed_bits -> { ... }) U8) :=
        │   │   │   │           │   ├── class := 0
        │   │   │   │           │   └── table-id := 1
        │   │   │   │           ├── num-codes <- repeat-count 16 ReadU8 :=
        │   │   │   │           │   ├── 0 := 0
        │   │   │   │           │   ├── 1 := 2
        │   │   │   │           │   ├── 2 := 3
        │   │   │   │           │   ├── 3 := 1
        │   │   │   │           │   ├── 4 := 1
        │   │   │   │           │   ├── 5 := 0
        │   │   │   │           │   ├── 6 := 0
        │   │   │   │           │   ├── 7 := 0
        │   │   │   │           │   ├── 8 := 0
        │   │   │   │           │   ├── 9 := 0
        │   │   │   │           │   ~
        │   │   │   │           │   └── 15 := 0
        │   │   │   │           └── values <- for-each num-codes n (repeat-count n ReadU8) :=
        │   │   │   │               ├── 0 := []
        │   │   │   │               ├── 1 :=
        │   │   │   │               │   ├── 0 := 0
        │   │   │   │               │   └── 1 := 4
        │   │   │   │               ├── 2 :=
        │   │   │   │               │   ├── 0 := 1
        │   │   │   │               │   ├── 1 := 3
        │   │   │   │               │   └── 2 := 5
        │   │   │   │               ├── 3 :=
        │   │   │   │               │   └── 0 := 2
        │   │   │   │               ├── 4 :=
        │   │   │   │               │   └── 0 := 6
        │   │   │   │               ├── 5 := []
        │   │   │   │               ├── 6 := []
        │   │   │   │               ├── 7 := []
        │   │   │   │               ├── 8 := []
        │   │   │   │               ├── 9 := []
        │   │   │   │               ~
        │   │   │   │               └── 15 := []
        │   │   │   └── 3 <- jpeg.table-or-misc :=
        │   │   │       └── dht <- jpeg.dht :=
        │   │   │           ├── marker <- { ... }
        │   │   │           ├── length <- ReadU16Be := 38
        │   │   │           └── data <- slice (length - 2) jpeg.dht-data :=
        │   │   │               ├── class-table-id <- assert (class-table-id -> (class-table-id.class < 2) && (class-table-id.table-id < 4)) (map (packed_bits -> { ... }) U8) :=
        │   │   │               │   ├── class := 1
        │   │   │               │   └── table-id := 1
        │   │   │               ├── num-codes <- repeat-count 16 ReadU8 :=
        │   │   │               │   ├── 0 := 0
        │   │   │               │   ├── 1 := 3
        │   │   │               │   ├── 2 := 0
        │   │   │               │   ├── 3 := 2
        │   │   │               │   ├── 4 := 2
        │   │   │               │   ├── 5 := 2
        │   │   │               │   ├── 6 := 1
        │   │   │               │   ├── 7 := 4
        │   │   │               │   ├── 8 := 2
        │   │   │               │   ├── 9 := 3
        │   │   │               │   ~
        │   │   │               │   └── 15 := 0
        │   │   │               └── values <- for-each num-codes n (repeat-count n ReadU8) :=
        │   │   │                   ├── 0 := []
        │   │   │                   ├── 1 :=
        │   │   │                   │   ├── 0 := 0
        │   │   │                   │   ├── 1 := 1
        │   │   │                   │   └── 2 := 2
        │   │   │                   ├── 2 := []
        │   │   │                   ├── 3 :=
        │   │   │                   │   ├── 0 := 3
        │   │   │                   │   └── 1 := 17
        │   │   │                   ├── 4 :=
        │   │   │                   │   ├── 0 := 4
        │   │   │                   │   └── 1 := 33
        │   │   │                   ├── 5 :=
        │   │   │                   │   ├── 0 := 18
        │   │   │                   │   └── 1 := 49
        │   │   │                   ├── 6 :=
        │   │   │                   │   └── 0 := 34
        │   │   │                   ├── 7 :=
        │   │   │                   │   ├── 0 := 19
        │   │   │                   │   ├── 1 := 20
        │   │   │                   │   ├── 2 := 50
        │   │   │                   │   └── 3 := 65
        │   │   │                   ├── 8 :=
        │   │   │                   │   ├── 0 := 35
        │   │   │                   │   └── 1 := 81
        │   │   │                   ├── 9 :=
        │   │   │                   │   ├── 0 := 66
        │   │   │                   │   ├── 1 := 113
        │   │   │                   │   └── 2 := 145
        │   │   │                   ~
        │   │   │                   └── 15 := []
        │   │   ├── sos <- jpeg.sos :=
        │   │   │   ├── marker <- { ... }
        │   │   │   ├── length <- ReadU16Be := 12
        │   │   │   └── data <- slice (length - 2) jpeg.sos-data :=
        │   │   │       ├── num-image-components <- assert (x -> match x { ... }) ReadU8 := 3
        │   │   │       ├── image-components <- repeat-count num-image-components jpeg.sos-image-component :=
        │   │   │       │   ├── 0 <- jpeg.sos-image-component :=
        │   │   │       │   │   ├── component-selector <- ReadU8 := 1
        │   │   │       │   │   └── entropy-coding-table-ids <- assert (entropy-coding-table-ids -> (entropy-coding-table-ids.dc-entropy-coding-table-id <= 3) && (entropy-coding-table-ids.ac-entropy-coding-table-id <= 3)) (map (packed_bits -> { ... }) U8) :=
        │   │   │       │   │       ├── dc-entropy-coding-table-id := 0
        │   │   │       │   │       └── ac-entropy-coding-table-id := 0
        │   │   │       │   ├── 1 <- jpeg.sos-image-component :=
        │   │   │       │   │   ├── component-selector <- ReadU8 := 2
        │   │   │       │   │   └── entropy-coding-table-ids <- assert (entropy-coding-table-ids -> (entropy-coding-table-ids.dc-entropy-coding-table-id <= 3) && (entropy-coding-table-ids.ac-entropy-coding-table-id <= 3)) (map (packed_bits -> { ... }) U8) :=
        │   │   │       │   │       ├── dc-entropy-coding-table-id := 1
        │   │   │       │   │       └── ac-entropy-coding-table-id := 1
        │   │   │       │   └── 2 <- jpeg.sos-image-component :=
        │   │   │       │       ├── component-selector <- ReadU8 := 3
        │   │   │       │       └── entropy-coding-table-ids <- assert (entropy-coding-table-ids -> (entropy-coding-table-ids.dc-entropy-coding-table-id <= 3) && (entropy-coding-table-ids.ac-entropy-coding-table-id <= 3)) (map (packed_bits -> { ... }) U8) :=
        │   │   │       │           ├── dc-entropy-coding-table-id := 1
        │   │   │       │           └── ac-entropy-coding-table-id := 1
        │   │   │       ├── start-spectral-selection <- assert (x -> x <= 63) ReadU8 := 0
        │   │   │       ├── end-spectral-selection <- assert (x -> x <= 63) ReadU8 := 63
        │   │   │       └── approximation-bit-position <- map (packed_bits -> { ... }) U8 :=
        │   │   │           ├── high := 0
        │   │   │           └── low := 0
        │   │   └── data <- jpeg.scan-data :=
        │   │       ├── scan-data <- repeat (_ |...| _) :=
        │   │       │   ├── 0 := { mcu := 191 }
        │   │       │   ├── 1 := { mcu := 244 }
        │   │       │   ├── 2 := { mcu := 104 }
        │   │       │   ├── 3 := { mcu := 209 }
        │   │       │   ├── 4 := { mcu := 160 }
        │   │       │   ├── 5 := { mcu := 3 }
        │   │       │   ├── 6 := { mcu := 70 }
        │   │       │   ├── 7 := { mcu := 141 }
        │   │       │   ├── 8 := { mcu := 26 }
        │   │       │   ├── 9 := { mcu := 0 }
        │   │       │   ~
        │   │       │   └── 3636 := { mcu := 15 }
        │   │       └── scan-data-stream <- compute flat-map (x -> match x { ... }) scan-data :=
        │   │           ├── 0 := 191
        │   │           ├── 1 := 244
        │   │           ├── 2 := 104
        │   │           ├── 3 := 209
        │   │           ├── 4 := 160
        │   │           ├── 5 := 3
        │   │           ├── 6 := 70
        │   │           ├── 7 := 141
        │   │           ├── 8 := 26
        │   │           ├── 9 := 0
        │   │           ~
        │   │           └── 3636 := 15
        │   ├── dnl <- _ |...| _ := none
        │   └── scans <- repeat jpeg.scan := []
        └── eoi <- jpeg.eoi
